回应一下社区和QQ上私有或公开的一些问题
1、tio是否已经支持SSL
答：见：https://my.oschina.net/talenttan/blog/1587197

2、tio如何获取GroupContext
答：见：https://my.oschina.net/talenttan/blog/1595535

3、showcase只有demo没有文档的项目
答：见：http://www.cnblogs.com/panzi/p/7814062.html

4、tio单机是否真的支持百万级TCP长连接
答：目前并未测到过一百万个长连接，但本人亲测过18万，有网友测过30万(https://my.oschina.net/u/2369298/blog/915435)，你也可以自己测试一下到底可以支持多少个长连接

5、有看到社区一些地方对tio随意XXOO，为什么不回应一下
答：呵呵，不回应别人最多说你是儒夫，回应了别人会说你撕逼，两者我觉得还是前者好听些


列一下这个版本更新的内容

tio-utils
1、cache实现增加j2cache版实现（两级缓存）
2、cache实现增加caffeine版实现
3、cache实现增加caffeineRedis版实现（两级缓存）
4、jar升级，fst升到57，hutool升级到3.3.1等


tio-core
1、心跳检查时，日志优化，更清晰，感谢：一页子亥
2、SSL实现优化
3、优化解码算法，允许应用层设置packeNeededLength，这样在框架层就能事先判断收到的数据是否足够到可以解码，减少不必要的解码操作 


tio-http-server(内置mvc)
1、增加initPath，用于记录访问者最原始的path
2、增加token访问数据的监控和统计（PS:有一个CurrUseridGetter接口提供给应用 ，让应用根据token返回当前用户的userid） 
3、http请求支持/user/{userid}这样的路径路由，并且没有用正则表达式来匹配
4、把原来用guava实现的缓存换成caffeine
5、token监控和ip监控增加StatPathFilter，过滤掉不必要的path统计
6、基于tio-core的第3点，对tio-http解码算法进行优化，对文件上传时进行长度预判，减少不必要的解码
7、静态资源缓存实现小幅改动


tio-flash-policy-server
1、FlashPolicyServer优化，去掉框架层的心跳检查，改为自己用定时任务处理未关闭的连接（更安全）

其它一些优化，没一一记录，建议更新到最新版（可能有1-2处API没做兼容，但可能你并没有用到那几处API，所以升级几乎是零成本）

最新pom坐标
<dependency>
    <groupId>org.t-io</groupId>
    <artifactId>tio-core</artifactId>
    <version>2.0.8.v20180205-RELEASE</version>
</dependency>


最后说一下tio的计划
1、由于本人所在的项目全部用上了tio(tio-core, tio-http-server, tio-websocket-server, tio-webpacket, tio-flash-policy-server)，所以必然是会努力发展tio的。
2、关于大家一直吐槽最多的文档，这个可能会继续让大家失望下去，因为在4月份前，我的更多精力会在公司项目和发展tio功能本身，因此不敢轻意承诺大家，大家有兴趣可以看看源代码。